module lemmas where

open import Agda.Builtin.Equality
open import Agda.Builtin.Unit
open import Data.Integer
open import Data.Integer.Properties using (+-mono-≤; ≤ᵇ⇒≤)
open import Data.Integer.Solver
  using (module +-*-Solver)
open +-*-Solver using (solve; _:-_; :-_; con; _:=_)
                renaming (_:+_ to _#+_; _:*_ to _#*_)
open import Relation.Binary.PropositionalEquality using (subst; sym)


abstract
  -- abs cmonad φe1 φeout envlen envlen'; rew p1'; rew p2; rew p3; norm; trivial
  lemma-unit : (cmonad : ℤ) (φe1 : ℤ) (φeout : ℤ) (p1' : φeout ≡ φe1) (envlen' : ℤ) (p2 : cmonad ≡ + 1 + (envlen' + + 1)) (envlen : ℤ) (p3 : envlen' ≡ envlen) -> + 5 + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen ≤ + 31
  lemma-unit cmonad φe1 φeout p1' envlen' p2 envlen p3 =
    subst (λ x → + 5 + cmonad + - (+ 1 + + 0) + - φe1 + x + - envlen ≤ + 31) (sym p1') (subst (λ x → + 5 + x + - (+ 1 + + 0) + - φe1 + φe1 + - envlen ≤ + 31) (sym p2) (subst (λ x → + 5 + (+ 1 + (x + + 1)) + - (+ 1 + + 0) + - φe1 + φe1 + - envlen ≤ + 31) (sym p3) (subst (λ x → x ≤ + 31) (solve 2 (λ a → λ b → con (+ 6) := con (+ 5) #+ (con (+ 1) #+ (a #+ con (+ 1))) #+ :- (con (+ 1) #+ con (+ 0)) #+ :- b #+ b #+ :- a) refl envlen φe1) (subst (λ x → + 6 ≤ x) (solve 0 (con (+ 31) := con (+ 31)) refl) (≤ᵇ⇒≤ tt)))))

  -- abs crun1 crun2 ccall1 ccall2 cmonad cmonad1 cmonad2 czero1 czero2 φd1 φd2 φe1 φe2 φe3 φeout evc1 evc2 envlen; sub k1; sub k2; sub pzero1; sub pzero2; rew prunbind2; rew pφd1; rew pφd2; rew pφdenvout; norm; trivial
  lemma-pair-nothing : (crun1 : ℤ) (crun2 : ℤ) (czero1 : ℤ) (czero2 : ℤ) (ccall1 : ℤ) (ccall2 : ℤ) (cmonad : ℤ) (cmonad1 : ℤ) (cmonad2 : ℤ) (φd1 : ℤ) (φd2 : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φe3 : ℤ) (φeout : ℤ) (evc1 : ℤ) (evc2 : ℤ) (pzero1 : czero1 ≤ + 2) (pzero2 : czero2 ≤ + 2) (pφd1 : φd1 ≡ + 1) (pφd2 : φd2 ≡ + 1) (pφdenvout : φeout ≡ φe3) (envlen : ℤ) (prunbind2 : cmonad ≡ cmonad1 + + 1 + cmonad2 + - envlen) (k1 : crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen ≤ + 31 * evc1) (k2 : crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen ≤ + 31 * evc2) -> + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen ≤ + 31 * (+ 1 + evc1 + evc2)
  lemma-pair-nothing crun1 crun2 czero1 czero2 ccall1 ccall2 cmonad cmonad1 cmonad2 φd1 φd2 φe1 φe2 φe3 φeout evc1 evc2 pzero1 pzero2 pφd1 pφd2 pφdenvout envlen prunbind2 k1 k2 =
    subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen) (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1) (+ 31 * evc2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 + + 31 * evc2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen)) czero1) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) - czero1 ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + cmonad + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) - czero1) czero2) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + x + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) - czero1 - czero2 ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2) (sym prunbind2) (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + (cmonad1 + + 1 + cmonad2 + - envlen) + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - x + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) - czero1 - czero2 ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2) (sym pφd1) (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + (cmonad1 + + 1 + cmonad2 + - envlen) + - (+ 1 + + 0) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - + 1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - x + - φe2 + φe3 + - envlen) - czero1 - czero2 ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2) (sym pφd2) (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 4 + czero2 + ccall2) + (+ 1 + (+ 4 + czero1 + ccall1) + + 2)) + (cmonad1 + + 1 + cmonad2 + - envlen) + - (+ 1 + + 0) + - φe1 + x + - envlen - (crun1 + ccall1 + cmonad1 + - + 1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - + 1 + - φe2 + φe3 + - envlen) - czero1 - czero2 ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2) (sym pφdenvout) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 - + 2) (solve 12 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → λ i → λ j → λ k → λ l → con (+ 26) := con (+ 1) #+ (con (+ 1) #+ a #+ b) #+ con (+ 10) #+ (con (+ 1) #+ (con (+ 4) #+ c #+ d) #+ (con (+ 1) #+ (con (+ 4) #+ e #+ f) #+ con (+ 2))) #+ (g #+ con (+ 1) #+ h #+ :- i) #+ :- (con (+ 1) #+ con (+ 0)) #+ :- j #+ k #+ :- i :- (a #+ f #+ g #+ :- con (+ 1) #+ :- j #+ l #+ :- i) :- (b #+ d #+ h #+ :- con (+ 1) #+ :- l #+ k #+ :- i) :- e :- c) refl crun1 crun2 czero2 ccall2 czero1 ccall1 cmonad1 cmonad2 envlen φe1 φe3 φe2) (subst (λ x → + 26 ≤ x) (solve 2 (λ a → λ b → con (+ 27) := con (+ 31) #* (con (+ 1) #+ a #+ b) :- con (+ 31) #* a :- con (+ 31) #* b :- con (+ 2) :- con (+ 2)) refl evc1 evc2) (≤ᵇ⇒≤ tt))))))) pzero2))) pzero1))) k2))) k1))

  -- abs crun1 crun2 ccall1 ccall2 cmonad cmonad1 cmonad2 φd1 φd2 φe1 φe2 φe3 φeout evc1 evc2 envlen; sub k1; sub k2; rew prunbind2; rew pφdenvout; norm; trivial
  lemma-pair-just : (crun1 : ℤ) (crun2 : ℤ) (ccall1 : ℤ) (ccall2 : ℤ) (cmonad : ℤ) (cmonad1 : ℤ) (cmonad2 : ℤ) (φd1 : ℤ) (φd2 : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φe3 : ℤ) (φeout : ℤ) (evc1 : ℤ) (evc2 : ℤ) (pφdenvout : φeout ≡ φe3) (envlen : ℤ) (prunbind2 : cmonad ≡ cmonad1 + + 1 + cmonad2 + - envlen) (k1 : crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen ≤ + 31 * evc1) (k2 : crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen ≤ + 31 * evc2) -> + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + cmonad + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen ≤ + 31 * (+ 1 + evc1 + evc2)
  lemma-pair-just crun1 crun2 ccall1 ccall2 cmonad cmonad1 cmonad2 φd1 φd2 φe1 φe2 φe3 φeout evc1 evc2 pφdenvout envlen prunbind2 k1 k2 =
    subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + cmonad + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + cmonad + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen) (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + cmonad + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1) (+ 31 * evc2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 + + 31 * evc2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + cmonad + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + x + - (+ 1 + φd1 + φd2) + - φe1 + φeout + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym prunbind2) (subst (λ x → + 1 + (+ 1 + crun1 + crun2) + + 10 + (+ 1 + (+ 6 + ccall2) + (+ 1 + (+ 6 + ccall1) + + 2)) + (cmonad1 + + 1 + cmonad2 + - envlen) + - (+ 1 + φd1 + φd2) + - φe1 + x + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - (crun2 + ccall2 + cmonad2 + - φd2 + - φe2 + φe3 + - envlen) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym pφdenvout) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (solve 12 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → λ i → λ j → λ k → λ l → con (+ 28) := con (+ 1) #+ (con (+ 1) #+ a #+ b) #+ con (+ 10) #+ (con (+ 1) #+ (con (+ 6) #+ c) #+ (con (+ 1) #+ (con (+ 6) #+ d) #+ con (+ 2))) #+ (e #+ con (+ 1) #+ f #+ :- g) #+ :- (con (+ 1) #+ h #+ i) #+ :- j #+ k #+ :- g :- (a #+ d #+ e #+ :- h #+ :- j #+ l #+ :- g) :- (b #+ c #+ f #+ :- i #+ :- l #+ k #+ :- g)) refl crun1 crun2 ccall2 ccall1 cmonad1 cmonad2 envlen φd1 φd2 φe1 φe3 φe2) (subst (λ x → + 28 ≤ x) (solve 2 (λ a → λ b → con (+ 31) := con (+ 31) #* (con (+ 1) #+ a #+ b) :- con (+ 31) #* a :- con (+ 31) #* b) refl evc1 evc2) (≤ᵇ⇒≤ tt))))) k2))) k1))

  -- abs cmonad φd φe1 φe2 φeout cplus envlen envlen'; rew prunadd2; rew p1; rew plenmap; rew pφaddlet; rew paddlet; sub pplus; norm; trivial
  lemma-var : (cmonad : ℤ) (φd : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φeout : ℤ) (p1 : φeout ≡ φe2) (envlen : ℤ) (cplus : ℤ) (envlen' : ℤ) (prunadd2 : cmonad ≡ + 2 + cplus + envlen') (plenmap : envlen ≡ envlen') (x20 : _) (x21 : _) (pφaddlet : φe2 ≡ φe1 + - x20 + x21) (x22 : _) (pplus : cplus + - φd + - x20 + x22 ≤ + 0) (paddlet : x21 ≡ x22) -> + 5 + cmonad + - φd + - φe1 + φeout + - envlen ≤ + 31
  lemma-var cmonad φd φe1 φe2 φeout p1 envlen cplus envlen' prunadd2 plenmap x20 x21 pφaddlet x22 pplus paddlet =
    subst (λ x → + 5 + x + - φd + - φe1 + φeout + - envlen ≤ + 31) (sym prunadd2) (subst (λ x → + 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + x + - envlen ≤ + 31) (sym p1) (subst (λ x → + 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + φe2 + - x ≤ + 31) (sym plenmap) (subst (λ x → + 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + x + - envlen' ≤ + 31) (sym pφaddlet) (subst (λ x → + 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + (φe1 + - x20 + x) + - envlen' ≤ + 31) (sym paddlet) (subst (λ x → + 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + (φe1 + - x20 + x22) + - envlen' ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31) (+ 0)) (subst (λ x → x ≤ + 31 - + 0 + + 0) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + (+ 2 + cplus + envlen') + - φd + - φe1 + (φe1 + - x20 + x22) + - envlen') (cplus + - φd + - x20 + x22)) (+-mono-≤ (subst (λ x → x ≤ + 31 - + 0) (solve 6 (λ a → λ b → λ c → λ d → λ e → λ f → con (+ 7) := con (+ 5) #+ (con (+ 2) #+ a #+ b) #+ :- c #+ :- d #+ (d #+ :- e #+ f) #+ :- b :- (a #+ :- c #+ :- e #+ f)) refl cplus envlen' φd φe1 x20 x22) (subst (λ x → + 7 ≤ x) (solve 0 (con (+ 31) := con (+ 31) :- con (+ 0)) refl) (≤ᵇ⇒≤ tt))) pplus)))))))

  -- abs crun1 crun2 crun2' czero ccall2 cmonad cmonad1 cmonad2 cmonad2' φd φe1 φeout φzerores φdx φdx' φdenv2 φdenv2' φdenv3 envlen evc1 evc2 cbp1 cbp2; sub k2; sub k1; sub pczerosmall; rew equals-crun2; rew equals-ccall2; rew prunbind2; rew equal-cmonad2; rew equal-φdx; rew equal-φdenv2; rew prunbind1φ; rew pφzeroressmall; norm; trivial
  lemma-let : (evc1 : ℤ) (evc2 : ℤ) (crun1 : ℤ) (crun2 : ℤ) (crun2' : ℤ) (equals-crun2 : crun2 ≡ crun2') (czero : ℤ) (ccall2 : ℤ) (cmonad : ℤ) (cmonad2 : ℤ) (cbp1 : ℤ) (cbp2 : ℤ) (equals-ccall2 : ccall2 ≡ cbp2) (cmonad1 : ℤ) (cmonad2' : ℤ) (equal-cmonad2 : cmonad2 ≡ cmonad2') (envlen : ℤ) (prunbind2 : cmonad ≡ cmonad2 + (+ 5 + cbp1) + cmonad1 + - envlen) (φd : ℤ) (φe1 : ℤ) (φeout : ℤ) (φzerores : ℤ) (φdx : ℤ) (φdx' : ℤ) (equal-φdx : φdx ≡ φdx') (φdenv2 : ℤ) (φdenv2' : ℤ) (equal-φdenv2 : φdenv2 ≡ φdenv2') (φdenv3 : ℤ) (prunbind1φ : φeout ≡ φdenv3) (pczerosmall : czero ≤ + 2) (pφzeroressmall : φzerores ≡ + 1) (k2 : crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen) ≤ + 31 * evc2) (k1 : crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen ≤ + 31 * (+ 1 + evc1 + evc2)
  lemma-let evc1 evc2 crun1 crun2 crun2' equals-crun2 czero ccall2 cmonad cmonad2 cbp1 cbp2 equals-ccall2 cmonad1 cmonad2' equal-cmonad2 envlen prunbind2 φd φe1 φeout φzerores φdx φdx' equal-φdx φdenv2 φdenv2' equal-φdenv2 φdenv3 prunbind1φ pczerosmall pφzeroressmall k2 k1 =
    subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2)) (+ 31 * evc2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 + + 31 * evc2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen) (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen))) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc2) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen))) (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen)) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + x + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym equals-crun2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + x)) + + 2) + cmonad + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym equals-ccall2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + x + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym prunbind2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + (x + (+ 5 + cbp1) + cmonad1 + - envlen) + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx + - φdenv2 + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym equal-cmonad2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + (cmonad2' + (+ 5 + cbp1) + cmonad1 + - envlen) + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - x + - φdenv2 + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym equal-φdx) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + (cmonad2' + (+ 5 + cbp1) + cmonad1 + - envlen) + - φd + - φe1 + φeout + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx' + - x + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym equal-φdenv2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + (cmonad2' + (+ 5 + cbp1) + cmonad1 + - envlen) + - φd + - φe1 + x + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (φzerores + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx' + - φdenv2' + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym prunbind1φ) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2' + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + cbp2)) + + 2) + (cmonad2' + (+ 5 + cbp1) + cmonad1 + - envlen) + - φd + - φe1 + φdenv3 + - envlen - (crun2' + cbp2 + cmonad2' + - φd + - (x + φe1) + (φdx' + φdenv2') + - (+ 1 + envlen)) - (crun1 + cbp1 + cmonad1 + - φdx' + - φdenv2' + φdenv3 + - envlen) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (sym pφzeroressmall) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc2 - + 31 * evc1 - + 2) (solve 13 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → λ i → λ j → λ k → λ l → λ m → con (+ 26) := con (+ 1) #+ a #+ (con (+ 3) #+ (con (+ 1) #+ b #+ con (+ 6))) #+ (con (+ 1) #+ (con (+ 1) #+ c #+ (con (+ 4) #+ d)) #+ con (+ 2)) #+ (e #+ (con (+ 5) #+ f) #+ g #+ :- h) #+ :- i #+ :- j #+ k #+ :- h :- (b #+ d #+ e #+ :- i #+ :- (con (+ 1) #+ j) #+ (l #+ m) #+ :- (con (+ 1) #+ h)) :- (a #+ f #+ g #+ :- l #+ :- m #+ k #+ :- h) :- c) refl crun1 crun2' czero cbp2 cmonad2' cbp1 cmonad1 envlen φd φe1 φdenv3 φdx' φdenv2') (subst (λ x → + 26 ≤ x) (solve 2 (λ a → λ b → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a #+ b) :- con (+ 31) #* b :- con (+ 31) #* a :- con (+ 2)) refl evc1 evc2) (≤ᵇ⇒≤ tt))))))))))) pczerosmall))) k1))) k2))

  -- abs crun1 ccall1 cmonad1 cdprim φd φdx φe1 φe2 evc1 envlen; sub k1; sub lem3; norm; trivial
  lemma-prim : (crun1 : ℤ) (cdprim : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φdx : ℤ) (φd : ℤ) (φe1 : ℤ) (φe2 : ℤ) (evc1 : ℤ) (lem3 : cdprim + - φd + φdx ≤ + 14) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - φdx + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 3 + (+ 3 + (+ 2 + cdprim)) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-prim crun1 cdprim ccall1 cmonad1 φdx φd φe1 φe2 evc1 lem3 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 3 + (+ 2 + cdprim)) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 3 + (+ 2 + cdprim)) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - φdx + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 3 + (+ 2 + cdprim)) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φdx + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1) (+ 14)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 14 + + 14) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 3 + (+ 2 + cdprim)) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φdx + - φe1 + φe2 + - envlen)) (cdprim + - φd + φdx)) (+-mono-≤ (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 14) (solve 9 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → λ i → con (+ 15) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 3) #+ (con (+ 3) #+ (con (+ 2) #+ b)) #+ c) #+ d #+ :- e #+ :- f #+ g #+ :- h :- (a #+ c #+ d #+ :- i #+ :- f #+ g #+ :- h) :- (b #+ :- e #+ i)) refl crun1 cdprim ccall1 cmonad1 φd φe1 φe2 envlen φdx) (subst (λ x → + 15 ≤ x) (solve 1 (λ a → con (+ 17) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a :- con (+ 14)) refl evc1) (≤ᵇ⇒≤ tt))) lem3))) k1))

  -- abs crun1 ccall1 cmonad1 czero φd φd1 φe1 φe2 evc1 envlen; sub k1; sub pzero; rew pφd1; norm; trivial
  lemma-fst : (crun1 : ℤ) (czero : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φd : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φd1 : ℤ) (evc1 : ℤ) (pzero : czero ≤ + 2) (pφd1 : φd1 ≡ + 1) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - (+ 1 + φd + φd1) + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-fst crun1 czero ccall1 cmonad1 φd φe1 φe2 φd1 evc1 pzero pφd1 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - (+ 1 + φd + φd1) + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + φd + φd1) + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + φd + φd1) + - φe1 + φe2 + - envlen)) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + φd + x) + - φe1 + φe2 + - envlen) - czero ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (sym pφd1) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (solve 8 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → con (+ 14) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 3) #+ (con (+ 2) #+ b) #+ c) #+ d #+ :- e #+ :- f #+ g #+ :- h :- (a #+ c #+ d #+ :- (con (+ 1) #+ e #+ con (+ 1)) #+ :- f #+ g #+ :- h) :- b) refl crun1 czero ccall1 cmonad1 φd φe1 φe2 envlen) (subst (λ x → + 14 ≤ x) (solve 1 (λ a → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a :- con (+ 2)) refl evc1) (≤ᵇ⇒≤ tt)))) pzero))) k1))

  -- abs crun1 ccall1 cmonad1 czero φd φd1 φe1 φe2 evc1 envlen; sub k1; sub pzero; rew pφd1; norm; trivial
  lemma-snd : (crun1 : ℤ) (czero : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φd : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φd1 : ℤ) (evc1 : ℤ) (pzero : czero ≤ + 2) (pφd1 : φd1 ≡ + 1) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - (+ 1 + φd1 + φd) + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-snd crun1 czero ccall1 cmonad1 φd φe1 φe2 φd1 evc1 pzero pφd1 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - (+ 1 + φd1 + φd) + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + φd1 + φd) + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + φd1 + φd) + - φe1 + φe2 + - envlen)) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 1 + czero + + 1) + ccall1) + cmonad1 + - φd + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - (+ 1 + x + φd) + - φe1 + φe2 + - envlen) - czero ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (sym pφd1) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (solve 8 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → con (+ 14) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 3) #+ (con (+ 1) #+ b #+ con (+ 1)) #+ c) #+ d #+ :- e #+ :- f #+ g #+ :- h :- (a #+ c #+ d #+ :- (con (+ 1) #+ con (+ 1) #+ e) #+ :- f #+ g #+ :- h) :- b) refl crun1 czero ccall1 cmonad1 φd φe1 φe2 envlen) (subst (λ x → + 14 ≤ x) (solve 1 (λ a → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a :- con (+ 2)) refl evc1) (≤ᵇ⇒≤ tt)))) pzero))) k1))

  -- abs crun1 czero ccall1 cmonad1 φe1 φe2 φd1 evc1 envlen; sub k1; sub pφd1; rew pzero; norm; trivial
  lemma-inl-nothing : (crun1 : ℤ) (czero : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φd1 : ℤ) (evc1 : ℤ) (pzero : φd1 ≡ + 1) (pφd1 : czero ≤ + 2) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-inl-nothing crun1 czero ccall1 cmonad1 φe1 φe2 φd1 evc1 pzero pφd1 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + + 0) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - x + - φe1 + φe2 + - envlen) - czero ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (sym pzero) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) (solve 7 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → con (+ 12) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 3) #+ (con (+ 2) #+ b) #+ c) #+ d #+ :- (con (+ 1) #+ con (+ 0)) #+ :- e #+ f #+ :- g :- (a #+ c #+ d #+ :- con (+ 1) #+ :- e #+ f #+ :- g) :- b) refl crun1 czero ccall1 cmonad1 φe1 φe2 envlen) (subst (λ x → + 12 ≤ x) (solve 1 (λ a → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a :- con (+ 2)) refl evc1) (≤ᵇ⇒≤ tt)))) pφd1))) k1))

  -- abs crun1 ccall1 cmonad1 φe1 φe2 φd1 evc1 envlen; sub k1; norm; trivial
  lemma-inl-inj1 : (crun1 : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φd1 : ℤ) (evc1 : ℤ) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 5 + ccall1) + cmonad1 + - (+ 1 + φd1) + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-inl-inj1 crun1 ccall1 cmonad1 φe1 φe2 φd1 evc1 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 5 + ccall1) + cmonad1 + - (+ 1 + φd1) + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 5 + ccall1) + cmonad1 + - (+ 1 + φd1) + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1) (solve 7 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → con (+ 11) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 5) #+ b) #+ c #+ :- (con (+ 1) #+ d) #+ :- e #+ f #+ :- g :- (a #+ b #+ c #+ :- d #+ :- e #+ f #+ :- g)) refl crun1 ccall1 cmonad1 φd1 φe1 φe2 envlen) (subst (λ x → + 11 ≤ x) (solve 1 (λ a → con (+ 31) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a) refl evc1) (≤ᵇ⇒≤ tt))) k1))

  -- abs crun1 czero ccall1 cmonad1 φe1 φe2 φd1 φd2 evc1 envlen; sub k1; sub pφd1; sub pφd2; sub sym-φd2; rew pzero; norm; trivial
  lemma-inl-inj2 : (crun1 : ℤ) (czero : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (φe1 : ℤ) (φe2 : ℤ) (φd1 : ℤ) (φd2 : ℤ) (evc1 : ℤ) (pzero : φd1 ≡ + 1) (pφd1 : czero ≤ + 2) (pφd2 : + 0 ≤ φd2) (sym-φd2 : - φd2 ≤ - φd2) (envlen : ℤ) (k1 : crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen ≤ + 31 * evc1) -> + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen ≤ + 31 * (+ 1 + evc1)
  lemma-inl-inj2 crun1 czero ccall1 cmonad1 φe1 φe2 φd1 φd2 evc1 pzero pφd1 pφd2 sym-φd2 envlen k1 =
    subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen) (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen)) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - czero ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1 - + 2) φd2) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 - φd2 + φd2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - czero) (+ 0)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - czero - + 0 ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 - φd2) (- φd2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 - φd2 - - φd2 + - φd2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - φd1 + - φe1 + φe2 + - envlen) - czero - + 0) (- φd2)) (+-mono-≤ (subst (λ x → + 1 + crun1 + + 6 + (+ 3 + (+ 2 + czero) + ccall1) + cmonad1 + - (+ 1 + φd2) + - φe1 + φe2 + - envlen - (crun1 + ccall1 + cmonad1 + - x + - φe1 + φe2 + - envlen) - czero - + 0 - - φd2 ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 - φd2 - - φd2) (sym pzero) (subst (λ x → x ≤ + 31 * (+ 1 + evc1) - + 31 * evc1 - + 2 - φd2 - - φd2) (solve 8 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → con (+ 12) := con (+ 1) #+ a #+ con (+ 6) #+ (con (+ 3) #+ (con (+ 2) #+ b) #+ c) #+ d #+ :- (con (+ 1) #+ e) #+ :- f #+ g #+ :- h :- (a #+ c #+ d #+ :- con (+ 1) #+ :- f #+ g #+ :- h) :- b :- con (+ 0) :- :- e) refl crun1 czero ccall1 cmonad1 φd2 φe1 φe2 envlen) (subst (λ x → + 12 ≤ x) (solve 2 (λ a → λ b → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a) :- con (+ 31) #* a :- con (+ 2) :- b :- :- b) refl evc1 φd2) (≤ᵇ⇒≤ tt)))) sym-φd2))) pφd2))) pφd1))) k1))

  -- abs crun1 crun2 czero ccall2 cmonad-A cmonad1-B cmonad2-B ccall1 φd φdx φenvin φdenv2-A φdenv2-B φdenvout-B φzero φdx-X φdenv2-X crun2-X ccall2-X cmonad2-X envlen evc2; sub k1; sub k2; rew runbindres2; rew eq-crun2; rew eq-ccall2; rew eq-cmonad2; rew eq-φdx; rew eq-φdenv2; rew eq-φdenv2out; sub pczero; rew pφzero; norm; trivial
  lemma-case-1 : (evc1 : ℤ) (crun1 : ℤ) (crun2 : ℤ) (czero : ℤ) (ccall2 : ℤ) (cmonad2-B : ℤ) (ccall1 : ℤ) (cmonad1-B : ℤ) (cmonad-A : ℤ) (evc2 : ℤ) (envlen : ℤ) (φd : ℤ) (φdx : ℤ) (φenvin : ℤ) (φdenv2-A : ℤ) (φdenv2-B : ℤ) (φdenvout-B : ℤ) (φzero : ℤ) (crun2-X : ℤ) (ccall2-X : ℤ) (cmonad2-X : ℤ) (φdx-X : ℤ) (φdenv2-X : ℤ) (eq-crun2 : crun2 ≡ crun2-X) (eq-ccall2 : ccall2 ≡ ccall2-X) (eq-cmonad2 : cmonad2-B ≡ cmonad2-X) (eq-φdx : φdx ≡ φdx-X) (eq-φdenv2 : φdenv2-B ≡ φdenv2-X) (runbindres2 : cmonad-A ≡ cmonad2-B + (+ 6 + ccall1) + cmonad1-B + - envlen) (eq-φdenv2out : φdenv2-A ≡ φdenvout-B) (pczero : czero ≤ + 2) (pφzero : φzero ≡ + 1) (k1 : crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen ≤ + 31 * evc1) (k2 : crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen) ≤ + 31 * evc2) -> + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad-A + - φd + - φenvin + φdenv2-A + - envlen ≤ + 31 * (+ 1 + evc1 + evc2)
  lemma-case-1 evc1 crun1 crun2 czero ccall2 cmonad2-B ccall1 cmonad1-B cmonad-A evc2 envlen φd φdx φenvin φdenv2-A φdenv2-B φdenvout-B φzero crun2-X ccall2-X cmonad2-X φdx-X φdenv2-X eq-crun2 eq-ccall2 eq-cmonad2 eq-φdx eq-φdenv2 runbindres2 eq-φdenv2out pczero pφzero k1 k2 =
    subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad-A + - φd + - φenvin + φdenv2-A + - envlen ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2)) (+ 31 * evc1)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 + + 31 * evc1) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad-A + - φd + - φenvin + φdenv2-A + - envlen) (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen)) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad-A + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1) (+ 31 * evc2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 + + 31 * evc2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + cmonad-A + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen)) (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen))) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2 + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + x + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym runbindres2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + x + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2)) + + 2) + (cmonad2-B + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-crun2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + x)) + + 2) + (cmonad2-B + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-ccall2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (x + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx) + - φdenv2-B + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-cmonad2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + x) + - φdenv2-B + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-φdx) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenv2-A + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx-X) + - x + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-φdenv2) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + x + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx-X) + - φdenv2-X + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (sym eq-φdenv2out) (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenvout-B + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx-X) + - φdenv2-X + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2) (+ 2)) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2 + + 2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenvout-B + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx-X) + - φdenv2-X + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (φzero + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen))) czero) (+-mono-≤ (subst (λ x → + 1 + crun1 + (+ 3 + (+ 1 + crun2-X + + 6)) + (+ 1 + (+ 1 + czero + (+ 4 + ccall2-X)) + + 2) + (cmonad2-X + (+ 6 + ccall1) + cmonad1-B + - envlen) + - φd + - φenvin + φdenvout-B + - envlen - (crun1 + ccall1 + cmonad1-B + - (+ 1 + φdx-X) + - φdenv2-X + φdenvout-B + - envlen) - (crun2-X + ccall2-X + cmonad2-X + - φd + - (x + φenvin) + (φdx-X + φdenv2-X) + - (+ 1 + envlen)) - czero ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2) (sym pφzero) (subst (λ x → x ≤ + 31 * (+ 1 + evc1 + evc2) - + 31 * evc1 - + 31 * evc2 - + 2) (solve 13 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → λ i → λ j → λ k → λ l → λ m → con (+ 28) := con (+ 1) #+ a #+ (con (+ 3) #+ (con (+ 1) #+ b #+ con (+ 6))) #+ (con (+ 1) #+ (con (+ 1) #+ c #+ (con (+ 4) #+ d)) #+ con (+ 2)) #+ (e #+ (con (+ 6) #+ f) #+ g #+ :- h) #+ :- i #+ :- j #+ k #+ :- h :- (a #+ f #+ g #+ :- (con (+ 1) #+ l) #+ :- m #+ k #+ :- h) :- (b #+ d #+ e #+ :- i #+ :- (con (+ 1) #+ j) #+ (l #+ m) #+ :- (con (+ 1) #+ h)) :- c) refl crun1 crun2-X czero ccall2-X cmonad2-X ccall1 cmonad1-B envlen φd φenvin φdenvout-B φdx-X φdenv2-X) (subst (λ x → + 28 ≤ x) (solve 2 (λ a → λ b → con (+ 29) := con (+ 31) #* (con (+ 1) #+ a #+ b) :- con (+ 31) #* a :- con (+ 31) #* b :- con (+ 2)) refl evc1 evc2) (≤ᵇ⇒≤ tt)))) pczero)))))))))) k2))) k1))

  -- abs φx φy sσ sτ; sub k1; sub k2; norm; trivial
  lemma-φ-less-size : (φx : ℤ) (φy : ℤ) (sσ : ℤ) (k1 : φx ≤ sσ) (sτ : ℤ) (k2 : φy ≤ sτ) -> + 1 + φx + φy ≤ + 1 + (sσ + sτ)
  lemma-φ-less-size φx φy sσ k1 sτ k2 =
    subst (λ x → + 1 + φx + φy ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (sσ + sτ)) sσ) (subst (λ x → x ≤ + 1 + (sσ + sτ) - sσ + sσ) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + φx + φy) φx) (+-mono-≤ (subst (λ x → + 1 + φx + φy - φx ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (sσ + sτ) - sσ) sτ) (subst (λ x → x ≤ + 1 + (sσ + sτ) - sσ - sτ + sτ) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + φx + φy - φx) φy) (+-mono-≤ (subst (λ x → x ≤ + 1 + (sσ + sτ) - sσ - sτ) (solve 2 (λ a → λ b → con (+ 1) := con (+ 1) #+ a #+ b :- a :- b) refl φx φy) (subst (λ x → + 1 ≤ x) (solve 2 (λ a → λ b → con (+ 1) := con (+ 1) #+ (a #+ b) :- a :- b) refl sσ sτ) (≤ᵇ⇒≤ tt))) k2))) k1))

  -- abs crun1 crun2 ccall1 ccall2 cmonad1 cmonad2 czeroenv primal-cost codom-size envlen φd φdenvin φdenvout2; rew eq-crun; rew eq-ccall; rew eq-cmonad; sub k1; sub bound-φd; sub bound-φenv; sub sym-φdenvout2; sub bound-czeroenv; sub sym-result; norm; trivial
  lemma-th2 : (φd : ℤ) (envlen : ℤ) (czeroenv : ℤ) (φdenvin : ℤ) (crun1 : ℤ) (ccall1 : ℤ) (cmonad1 : ℤ) (crun2 : ℤ) (ccall2 : ℤ) (cmonad2 : ℤ) (φdenvout2 : ℤ) (eq-crun : crun1 ≡ crun2) (eq-ccall : ccall1 ≡ ccall2) (eq-cmonad : cmonad1 ≡ cmonad2) (bound-φenv : φdenvin ≤ φdenvout2) (bound-czeroenv : czeroenv ≤ + 1 + + 3 * envlen) (sym-φdenvout2 : - φdenvout2 ≤ - φdenvout2) (sym-result : + 1 + (+ 1 + (+ 1 + (+ 1 + envlen))) ≤ + 1 + (+ 1 + (+ 1 + (+ 1 + envlen)))) (primal-cost : ℤ) (codom-size : ℤ) (bound-φd : φd ≤ codom-size) (k1 : crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen ≤ + 31 * primal-cost) -> + 1 + (+ 1 + (+ 1 + crun1) + + 1 + ccall1) + czeroenv + cmonad1 ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen
  lemma-th2 φd envlen czeroenv φdenvin crun1 ccall1 cmonad1 crun2 ccall2 cmonad2 φdenvout2 eq-crun eq-ccall eq-cmonad bound-φenv bound-czeroenv sym-φdenvout2 sym-result primal-cost codom-size bound-φd k1 =
    subst (λ x → + 1 + (+ 1 + (+ 1 + x) + + 1 + ccall1) + czeroenv + cmonad1 ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen) (sym eq-crun) (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + x) + czeroenv + cmonad1 ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen) (sym eq-ccall) (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen) (sym eq-cmonad) (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen) (+ 31 * primal-cost)) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost + + 31 * primal-cost) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2) (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost) codom-size) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size + codom-size) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen)) φd) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size) φdenvout2) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 + φdenvout2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd) φdenvin) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2) (- φdenvout2)) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2 + - φdenvout2) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin) (- φdenvout2)) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin - - φdenvout2 ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2) (+ 1 + + 3 * envlen)) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2 - (+ 1 + + 3 * envlen) + (+ 1 + + 3 * envlen)) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin - - φdenvout2) czeroenv) (+-mono-≤ (subst (λ x → + 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin - - φdenvout2 - czeroenv ≤ x) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2 - (+ 1 + + 3 * envlen)) (+ 1 + (+ 1 + (+ 1 + (+ 1 + envlen))))) (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2 - (+ 1 + + 3 * envlen) - (+ 1 + (+ 1 + (+ 1 + (+ 1 + envlen)))) + (+ 1 + (+ 1 + (+ 1 + (+ 1 + envlen))))) (solve 2 (λ a → λ b → a :- b #+ b := a) refl (+ 1 + (+ 1 + (+ 1 + crun2) + + 1 + ccall2) + czeroenv + cmonad2 - (crun2 + ccall2 + cmonad2 + - φd + - φdenvin + φdenvout2 + - envlen) - φd - φdenvin - - φdenvout2 - czeroenv) (+ 1 + (+ 1 + (+ 1 + (+ 1 + envlen))))) (+-mono-≤ (subst (λ x → x ≤ + 5 + + 31 * primal-cost + codom-size + + 4 * envlen - + 31 * primal-cost - codom-size - φdenvout2 - - φdenvout2 - (+ 1 + + 3 * envlen) - (+ 1 + (+ 1 + (+ 1 + (+ 1 + envlen))))) (solve 8 (λ a → λ b → λ c → λ d → λ e → λ f → λ g → λ h → con (+ 0) := con (+ 1) #+ (con (+ 1) #+ (con (+ 1) #+ a) #+ con (+ 1) #+ b) #+ c #+ d :- (a #+ b #+ d #+ :- e #+ :- f #+ g #+ :- h) :- e :- f :- :- g :- c :- (con (+ 1) #+ (con (+ 1) #+ (con (+ 1) #+ (con (+ 1) #+ h))))) refl crun2 ccall2 czeroenv cmonad2 φd φdenvin φdenvout2 envlen) (subst (λ x → + 0 ≤ x) (solve 4 (λ a → λ b → λ c → λ d → con (+ 0) := con (+ 5) #+ con (+ 31) #* a #+ b #+ con (+ 4) #* c :- con (+ 31) #* a :- b :- d :- :- d :- (con (+ 1) #+ con (+ 3) #* c) :- (con (+ 1) #+ (con (+ 1) #+ (con (+ 1) #+ (con (+ 1) #+ c))))) refl primal-cost codom-size envlen φdenvout2) (≤ᵇ⇒≤ tt))) sym-result))) bound-czeroenv))) sym-φdenvout2))) bound-φenv))) bound-φd))) k1)))))
